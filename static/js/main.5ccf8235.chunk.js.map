{"version":3,"sources":["components/Todo.js","components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["id","activity","time","deleteTodo","className","useState","todos","setTodos","setActivity","onSubmit","e","preventDefault","length","handleSubmit","type","value","onChange","target","required","map","todo","Todo","App","Todos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAEe,gBAAEA,GAAF,IAAMC,EAAN,EAAMA,SAAN,EAAgBC,KAAhB,EAAsBC,WAAtB,OAEX,6BACI,uBAAGC,UAAU,WACb,8BAAOH,MCaA,aAAO,IAAD,EACSI,mBAAS,CAAC,KADnB,mBACVC,EADU,KACHC,EADG,OAEeF,mBAAS,IAFxB,mBAEVJ,EAFU,KAEAO,EAFA,KAKjB,OACI,6BACI,0BAAMC,SAAU,SAACC,GAAD,OAtBP,SAACA,EAAGJ,EAAOC,EAAUN,EAAUO,GAChDE,EAAEC,iBACF,IAAMX,EAAMM,EAAMM,OAAUN,EAAMA,EAAMM,OAAS,GAAGZ,GAAK,EAAI,EAE7DO,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACN,GAAIA,EAAIC,SAAUA,MAGvCO,EAAY,IAemBK,CAAaH,EAAGJ,EAAOC,EAAUN,EAAUO,KAElE,6BACI,+BAAO,wDACP,2BAAOJ,UAAU,WAAWU,KAAK,OAAOC,MAAOd,EAC/Ce,SAAU,SAACN,GAAD,OAAOF,EAAYE,EAAEO,OAAOF,QAAQG,UAAQ,IACtD,4BAAQJ,KAAK,UAAb,SAUHR,EAAMa,KAAI,SAAAC,GAAI,OAEX,kBAACC,EAAD,CAAMrB,GAAIoB,EAAKpB,GAAIC,SAAUmB,EAAKnB,gBC/BnCqB,MATf,WACE,OACE,yBAAKlB,UAAU,cACb,qDACA,kBAACmB,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5ccf8235.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default ({id, activity, time, deleteTodo}) => (\r\n     \r\n    <div>\r\n        <p className=\"fade-in\">\r\n        <span>{activity}</span>\r\n        {/* <span><button onClick={() => deleteTodo(id)}>Delete</button></span> */}\r\n        </p>\r\n    </div>\r\n)","import React, { useState } from 'react'\r\nimport Todo from './Todo'\r\n\r\n// const handleSubmit = (e, todos, setTodos, activity, setActivity, time, setTime) => {\r\nconst handleSubmit = (e, todos, setTodos, activity, setActivity) => {\r\n    e.preventDefault()\r\n    const id = (todos.length) ? todos[todos.length - 1].id + 1 : 0\r\n\r\n    setTodos([...todos, {id: id, activity: activity}])\r\n    // setTodos([...todos, {id: id, activity: activity, time: time}])\r\n\r\n    setActivity('')\r\n    // setTime('')\r\n}\r\n\r\n// const deleteTodo = (id, todos, setTodos) => {\r\n//     setTodos(todos.filter(todo => todo.id !== id))\r\n// }\r\n\r\nexport default () => {\r\n    const [todos, setTodos] = useState([''])\r\n    const [activity, setActivity] = useState('')\r\n    // const [time, setTime] = useState('')\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={(e) => handleSubmit(e, todos, setTodos, activity, setActivity)}>    \r\n            {/* <form onSubmit={(e) => handleSubmit(e, todos, setTodos, activity, setActivity, time, setTime)}> */}\r\n            <div>\r\n                <label><h3>What Do You Want To Do?</h3></label>\r\n                <input className=\"activity\" type=\"text\" value={activity}                  \r\n                onChange={(e) => setActivity(e.target.value)} required/>\r\n                <button type=\"submit\">Add</button>               \r\n                </div>\r\n                {/* <div>\r\n                <label>Time: </label>\r\n                <input type=\"text\" value={time}                  \r\n                onChange={(e) => setTime(e.target.value)}/>                \r\n                </div> */}\r\n                \r\n            </form>\r\n\r\n            {todos.map(todo => (\r\n                // <Todo id={todo.id} activity={todo.activity} time={todo.time} deleteTodo={(id) => deleteTodo(id, todos, setTodos)}></Todo>\r\n                <Todo id={todo.id} activity={todo.activity} ></Todo>\r\n\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Todos from './components/Todos';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App header\">\r\n      <h1>Dev Career To-Do List</h1>\r\n      <Todos></Todos>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}